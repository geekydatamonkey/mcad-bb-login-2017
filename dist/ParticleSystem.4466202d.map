{"version":3,"sources":["proto/js/ParticleSystem.js"],"names":["ParticleSystem","sketch","gravitationalConstant","Math","pow","maxAccel","particles","positionVector","position","p","Particle","createVector","push","console","log","particleFeelingForce","acceleration","set","forEach","distSq","getDistSqTo","rVector","getVectorTo","normalize","gAccel","min","gVector","mult","add","applyForcesTo","update","render"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAEMA;AACJ,gCAAwB;AAAA,QAAVC,MAAU,QAAVA,MAAU;;AAAA;;AACtB,SAAKA,MAAL,GAAcA,UAAU,IAAxB;AACA,SAAKC,qBAAL,GAA6B,IAAIC,KAAKC,GAAL,CAAS,EAAT,EAAa,CAAb,CAAjC;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACD;;;;gCAEW;AACV,WAAKA,SAAL,GAAiB,EAAjB;AACD;;;+BAEiC;AAAA,UAAlBC,cAAkB,SAA5BC,QAA4B;;AAChC,UAAMC,IAAI,IAAIC,QAAJ,CAAa;AACrBT,gBAAQ,KAAKA,MADQ;AAErBO,kBAAUD,kBAAkB,KAAKN,MAAL,CAAYU,YAAZ,CAAyB,CAAzB,EAA4B,CAA5B;AAFP,OAAb,CAAV;AAIA,WAAKL,SAAL,CAAeM,IAAf,CAAoBH,CAApB;AACAI,cAAQC,GAAR,oBAA+BL,CAA/B;;AAEAI,cAAQC,GAAR,CAAY,KAAKR,SAAjB;AACD;;;kCAEaS,sBAAsB;AAAA;;AAClC;AACAA,2BAAqBC,YAArB,CAAkCC,GAAlC,CAAsC,CAAtC,EAAyC,CAAzC;;AAEA,WAAKX,SAAL,CAAeY,OAAf,CAAuB,aAAK;AAC1B;AACA,YAAIT,MAAMM,oBAAV,EAAgC;AAC9B;AACD;;AAED;AACA,YAAII,SAASJ,qBAAqBK,WAArB,CAAiCX,CAAjC,CAAb;;AAEA;AACA,YAAIY,UAAUN,qBAAqBO,WAArB,CAAiCb,CAAjC,EAAoCc,SAApC,EAAd;;AAEA;AACA,YAAIC,SAAS,MAAKtB,qBAAL,GAA6BiB,MAA1C;;AAEA;AACAK,iBAASrB,KAAKsB,GAAL,CAASD,MAAT,EAAiB,MAAKnB,QAAtB,CAAT;;AAEA;AACA;AACA,YAAIqB,UAAUL,QAAQM,IAAR,CAAaH,MAAb,CAAd;;AAEA;AACAT,6BAAqBC,YAArB,CAAkCY,GAAlC,CAAsCF,OAAtC;AACD,OAxBD;AAyBD;;;6BAEQ;AAAA;;AACP;AACA;AACA;AACA;AACA,WAAKpB,SAAL,CAAeY,OAAf,CAAuB;AAAA,eAAK,OAAKW,aAAL,CAAmBpB,CAAnB,CAAL;AAAA,OAAvB;AACA,WAAKH,SAAL,CAAeY,OAAf,CAAuB;AAAA,eAAKT,EAAEqB,MAAF,EAAL;AAAA,OAAvB;AACA,aAAO,IAAP;AACD;;;6BAEQ;AACP,WAAKxB,SAAL,CAAeY,OAAf,CAAuB;AAAA,eAAKT,EAAEsB,MAAF,EAAL;AAAA,OAAvB;AACD","file":"ParticleSystem.4466202d.map","sourceRoot":"..","sourcesContent":["// import Particle from \"./Particle\";\n\nclass ParticleSystem {\n  constructor({ sketch }) {\n    this.sketch = sketch || null;\n    this.gravitationalConstant = 5 * Math.pow(10, 3);\n    this.maxAccel = 1;\n    this.particles = [];\n  }\n\n  removeAll() {\n    this.particles = [];\n  }\n\n  add({ position: positionVector }) {\n    const p = new Particle({\n      sketch: this.sketch,\n      position: positionVector || this.sketch.createVector(0, 0)\n    });\n    this.particles.push(p);\n    console.log(`adding particle`, p);\n\n    console.log(this.particles);\n  }\n\n  applyForcesTo(particleFeelingForce) {\n    // reset acceleration due to gravitation force to 0\n    particleFeelingForce.acceleration.set(0, 0);\n\n    this.particles.forEach(p => {\n      // don't apply force from self to self, silly\n      if (p === particleFeelingForce) {\n        return;\n      }\n\n      // get distance between particleFeelingForce and p\n      let distSq = particleFeelingForce.getDistSqTo(p);\n\n      // direction of accel vector, normalized (unit length is 1)\n      let rVector = particleFeelingForce.getVectorTo(p).normalize();\n\n      // accel due to gravity (magnitude)\n      let gAccel = this.gravitationalConstant / distSq;\n\n      // limit the max acceleration\n      gAccel = Math.min(gAccel, this.maxAccel);\n\n      // multiply our rVector by acceleration due to gravity\n      // to create the gravitational acceleration vector\n      let gVector = rVector.mult(gAccel);\n\n      // add this new acceleration\n      particleFeelingForce.acceleration.add(gVector);\n    });\n  }\n\n  update() {\n    // update acceleration vector on all particles.\n    // we do this separately from updating position\n    // since particle positions affect acceleration\n    // (with the inverse sq of distance)\n    this.particles.forEach(p => this.applyForcesTo(p));\n    this.particles.forEach(p => p.update());\n    return this;\n  }\n\n  render() {\n    this.particles.forEach(p => p.render());\n  }\n}\n"]}